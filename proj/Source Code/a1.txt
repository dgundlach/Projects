From websnarf@gmail.com Sat Jan 22 05:52:17 2005
From: websnarf@gmail.com
Newsgroups: comp.lang.c
Subject: Re: array riddle in c
Date: 22 Jan 2005 03:52:17 -0800
Organization: http://groups.google.com
Lines: 51
Message-ID: <1106394736.979901.18520@c13g2000cwb.googlegroups.com>
References: <1106185409.741576.83540@f14g2000cwb.googlegroups.com>
   <1106189757.278253.54600@f14g2000cwb.googlegroups.com>
NNTP-Posting-Host: 63.195.90.12
Mime-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
X-Trace: posting.google.com 1106394741 11224 127.0.0.1 (22 Jan 2005 11:52:21 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Sat, 22 Jan 2005 11:52:21 +0000 (UTC)
User-Agent: G2/0.2
Complaints-To: groups-abuse@google.com
Injection-Info: c13g2000cwb.googlegroups.com; posting-host=63.195.90.12;
   posting-account=Q4yACAwAAABV4SJ5zSg8UjQkQ_lf0ucZ
Path: newsfeed.slurp.net!news.moat.net!news.glorb.com!postnews.google.com!c13g2000cwb.googlegroups.com!not-for-mail
Xref: newsfeed.slurp.net comp.lang.c:100511

Ok, you didn't explain the limits on your "integers", so I am going to
go ahead and do the cheaters algorithm.  Compute each of the following
(which are each O(n)):

1. s = sum of numbers given.
2. p = product of numbers given.
3. t = n!

Then if the two numbers are a and b, we know that:

1. (a + b) = n*(n+1)/2 - s
2. (a*b) = t / p

Now we can see that:

(x - a) * (x - b) = x^2 - (a + b) * x + (a * b)

However this quadratic clearly has the roots a and b.  So solving for
the two roots using the classical quadratic formula will yield the two
solutions a and b.  QED.

Ok, but all this requires a bignum library and n! is actually a very
large and slow number to compute (that requires roughly O(n*log(n))
memory).

So lets say we are stuck using C, Pascal or some other fixed integer
sized language, and we don't want to cheat.  Then what we can do is
find the smallest prime k, which is greater than n^2 and work out:

1. t = n! (mod k)
2. p = product of inverses numbers given (mod k)

Then work out (t * p) (mod k) and it will be exactly the product a and
b.  This still requires a double-wide integer math library (which
includes the ability to take square roots for the quadratic solve), but
the time and space requirements for such a thing is still O(1).

On a typical 32 bit machine, assuming n < INT_MAX , we can use the
usually available 64 bit integer support to do this.  The only
complication is that working out the inverses (mod k) can be a big pain
in the ass (but it is still O(1), so I am set).

If you are unsatisfied with this, there is likely a way to solve it
analytically by computing a + b and a^2 + b^2, (I am too lazy to try to
go through the details) but this technically requires *triple*-wide
integer support.
--
Paul Hsieh
http://www.pobox.com/~qed/
http://bstring.sf.net/


